{"version":3,"sources":["data/index.ts","API/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dateInputFormat","dateOutPutFormat","getDate","daysFromDate","date","moment","format","add","formatDate","local","formatTime","time","request","method","url","a","params","fetch","response","json","console","log","message","opt","season","seasonScheduleYear","teams","daysGames","todaysGames","games","forEach","game","hTeamFullname","league","standard","filter","team","teamId","hTeam","fullName","vTeamFullname","vTeam","hTeamScore","score","vTeamScore","gameId","startTimeUTC","push","key","App","props","state","searching","currentDate","changeView","bind","getGames","this","setState","getDaysGames","then","direction","type","color","height","width","map","className","title","onClick","disabled","React","Component","Card","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d9254be.chunk.js","sourcesContent":["import moment from 'moment';\nconst dateInputFormat = \"YYYYMMDD\"\nconst dateOutPutFormat = \"DD MM YYYY\"\nconst timeFormat = \"HH:mm\"\n\nexport function getDate(daysFromDate: number, date = moment().format(dateInputFormat)): string{\n    if (daysFromDate === 0) return date\n    else return moment(date).add(daysFromDate, \"days\").format(dateInputFormat)\n}\n\nexport function formatDate(date: string, format=dateOutPutFormat){\n    return moment(date).local().format(format);\n}\n\nexport function formatTime(time: string){\n    return moment(time).local().format(timeFormat)\n}","import { formatTime } from \"../data\";\r\nimport { Game } from \"../interface\";\r\n\r\nexport async function request(method: string, url: string, params = \"\") {\r\n    try {\r\n        let response = await fetch(url + params, {\r\n            method: method,\r\n        })\r\n        return response.json()\r\n    } catch (error) {\r\n        console.log(`Issue with fetch: ${error.message}`);\r\n    }\r\n}\r\n\r\nexport async function getDaysGames(date: string): Promise<Game[]> {\r\n    const opt = await request(\"GET\", \"https://data.nba.net/10s/prod/v1/today.json\")\r\n    const season = opt.seasonScheduleYear \r\n    const teams = await request(\"GET\", `https://data.nba.net/10s/prod/v2/${season}/teams.json`)\r\n    const daysGames = await request(\"GET\", `https://data.nba.net/10s/prod/v1/${date}/scoreboard.json`)\r\n    let todaysGames: Game[]=[]\r\n    daysGames.games.forEach((game: any) => {\r\n        const hTeamFullname = teams.league.standard.filter((team: any) => team.teamId === game.hTeam.teamId)[0].fullName\r\n        const vTeamFullname = teams.league.standard.filter((team: any) => team.teamId === game.vTeam.teamId)[0].fullName\r\n        const hTeamScore = game.hTeam.score\r\n        const vTeamScore = game.vTeam.score\r\n        const gameId = game.gameId\r\n        const time = formatTime(game.startTimeUTC);\r\n        todaysGames.push({hTeam: {fullName:hTeamFullname, score: hTeamScore}, vTeam: {fullName: vTeamFullname, score: vTeamScore}, date:time, key:gameId})\r\n    })\r\n    return todaysGames\r\n}","import React from 'react';\nimport './App.css';\nimport { IAppState, Game, IAppProps } from './interface';\nimport { getDaysGames } from './API'\nimport { getDate, formatDate } from './data';\nimport Loader from 'react-loader-spinner';\n\nclass App extends React.Component<IAppProps, IAppState>{\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      searching: false,\n      games: [],\n      currentDate: getDate(0)\n    };\n    this.changeView = this.changeView.bind(this);\n    this.getGames()\n  }\n  getGames() {\n    this.setState({\n      searching: true\n    })\n    getDaysGames(this.state.currentDate).then(daysGames => {\n      this.setState({\n        games: daysGames,\n        searching: false\n      })\n    })\n  }\n  changeView(direction: number) {\n    this.setState({\n      currentDate: getDate(direction, this.state.currentDate)\n    },\n      this.getGames\n    )\n  }\n  games() {\n    if (this.state.searching) {\n      return (\n        <div>\n          <Loader type=\"Circles\" color=\"white\" height={80} width={80} />\n        </div>\n      )\n    }\n    else {\n      return (\n        <div >\n          {this.state.games.map(game =>\n            <Card\n              vTeam={game.vTeam}\n              hTeam={game.hTeam}\n              key={game.key}\n              date={game.date}\n            />\n          )}\n        </div>\n      )\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          {this.props.title}\n        </h1>\n        <button onClick={() => this.changeView(-1)} className=\"dateBtn\" disabled={this.state.searching}>&#8678;</button>\n        <p className=\"date\">{formatDate(this.state.currentDate)}</p>\n        <button onClick={() => this.changeView(1)} className=\"dateBtn\" disabled={this.state.searching}>&#8680;</button>\n        {this.games()}\n      </div>\n    );\n  }\n}\n\nconst Card = (props: Game) => {\n  function score() {\n    if (props.hTeam.score == \"\") {\n      return (\n        <div className=\"start-time\">{props.date}</div>\n      )\n    }\n    else {\n      return (\n        <div>\n          <div className=\"home score\">{props.hTeam.score}</div>\n          <span>-</span>\n          <div className=\"away score\">{props.vTeam.score}</div>\n        </div>\n      );\n    }\n  }\n  return (\n    <div className=\"card\">\n      <div className=\"home team\">\n        {props.hTeam.fullName}\n      </div>\n      <span>vs</span>\n      <div className=\"away team\">\n        {props.vTeam.fullName}\n      </div>\n      <br></br>\n      {score()}\n    </div>\n  )\n}\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App \n        title=\"NBA Games\"\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}