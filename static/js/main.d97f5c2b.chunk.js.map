{"version":3,"sources":["API/index.ts","data/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["request","method","url","a","params","fetch","response","json","console","error","log","message","date","opt","season","seasonScheduleYear","teams","daysGames","todaysGames","games","forEach","game","hTeamFullname","league","standard","filter","team","teamId","hTeam","fullName","vTeamFullname","vTeam","hTeamScore","score","vTeamScore","gameId","push","key","inputFormat","outPutFormat","getDate","daysFromDate","moment","format","add","formatDate","Card","props","className","App","state","searching","currentDate","changeView","bind","getGames","this","setState","getDaysGames","then","direction","type","color","height","width","map","title","onClick","disabled","showGamesView","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d97f5c2b.chunk.js","sourcesContent":["import { Game } from \"../interface\";\r\n\r\nexport async function request(method: string, url: string, params = \"\") {\r\n    try {\r\n        let response = await fetch(url + params, {\r\n            method: method,\r\n        })\r\n        return response.json()\r\n    } catch (error) {\r\n        console.error(error);\r\n        console.log(`There has been a problem with your fetch operation: ${error.message}`);\r\n    }\r\n}\r\n\r\nexport async function getDaysGames(date: string): Promise<Game[]> {\r\n    const opt = await request(\"GET\", \"https://data.nba.net/10s/prod/v1/today.json\")\r\n    const season = opt.seasonScheduleYear \r\n    const teams = await request(\"GET\", `https://data.nba.net/10s/prod/v2/${season}/teams.json`)\r\n    const daysGames = await request(\"GET\", `https://data.nba.net/10s/prod/v1/${date}/scoreboard.json`)\r\n    let todaysGames: Game[]=[]\r\n    daysGames.games.forEach((game: any) => {\r\n        const hTeamFullname = teams.league.standard.filter((team: any) => team.teamId === game.hTeam.teamId)[0].fullName\r\n        const vTeamFullname = teams.league.standard.filter((team: any) => team.teamId === game.vTeam.teamId)[0].fullName\r\n        const hTeamScore = game.hTeam.score\r\n        const vTeamScore = game.vTeam.score\r\n        const gameId = game.gameId\r\n        todaysGames.push({hTeam: {fullName:hTeamFullname, score: hTeamScore}, vTeam: {fullName: vTeamFullname, score: vTeamScore}, key:gameId})\r\n    })\r\n    return todaysGames\r\n}","import moment from 'moment';\nconst inputFormat = \"YYYYMMDD\"\nconst outPutFormat = \"DD MM YYYY\"\n\nexport function getDate(daysFromDate: number, date = moment().format(inputFormat)): string{\n    if (daysFromDate === 0) return date\n    else return moment(date).add(daysFromDate, \"days\").format(inputFormat)\n}\n\nexport function formatDate(date: string, format=outPutFormat){\n    return moment(date).format(format);\n}","import React from 'react';\nimport './App.css';\nimport { IAppState, Game, IAppProps } from './interface';\nimport { getDaysGames } from './API'\nimport { getDate, formatDate } from './data';\nimport Loader from 'react-loader-spinner';\n\nclass App extends React.Component<IAppProps, IAppState>{\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      searching: false,\n      games: [],\n      currentDate: getDate(0)\n    };\n    this.changeView = this.changeView.bind(this);\n    this.getGames()\n  }\n  getGames() {\n    this.setState({\n      searching: true\n    })\n    getDaysGames(this.state.currentDate).then(daysGames => {\n      this.setState({\n        games: daysGames,\n        searching: false\n      })\n    })\n  }\n  changeView(direction: number) {\n    this.setState({\n      currentDate: getDate(direction, this.state.currentDate)\n    },\n      this.getGames\n    )\n  }\n  showGamesView() {\n    if (this.state.searching) {\n      return (\n        <div>\n          <Loader type=\"Circles\" color=\"white\" height={80} width={80} />\n        </div>\n      )\n    }\n    else {\n      return (\n        <div >\n          {this.state.games.map(game =>\n            <Card\n              vTeam={game.vTeam}\n              hTeam={game.hTeam}\n              key={game.key}\n            />\n          )}\n        </div>\n      )\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          {this.props.title}\n        </h1>\n        <div className=\"inline\">\n          <button onClick={() => this.changeView(-1)} className=\"dateBtn\" disabled={this.state.searching}>&#8678;</button>\n          <p className=\"date\">{formatDate(this.state.currentDate)}</p>\n          <button onClick={() => this.changeView(1)} className=\"dateBtn\" disabled={this.state.searching}>&#8680;</button></div>\n        <div className=\"centered\">\n        </div>\n        {this.showGamesView()}\n      </div>\n    );\n  }\n}\n\nfunction Card(props: Game) {\n  return (\n    <div className=\"card\">\n      {props.hTeam.fullName} <span>vs</span> {props.vTeam.fullName}<br></br>\n      {props.hTeam.score} - {props.vTeam.score}\n    </div>\n  )\n}\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App \n        title=\"NBA Games\"\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}