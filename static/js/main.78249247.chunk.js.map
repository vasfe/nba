{"version":3,"sources":["data/index.js","API/index.js","components/Navbar.js","components/Card.js","components/Games.js","App.js","index.js"],"names":["dateInputFormat","formatTime","time","moment","local","format","getDate","daysFromDate","date","add","request","method","url","a","params","fetch","response","json","console","log","message","opt","season","seasonScheduleYear","teams","daysGames","todaysGames","games","forEach","game","push","hTeam","fullName","league","standard","filter","team","teamId","score","seriesWin","vTeam","homeStartDate","startTimeUTC","key","gameId","startTimeTBD","isStartTimeTBD","arena","name","city","isActiveGame","isGameActivated","isEnded","undefined","endTimeUTC","Nav","styled","div","Date","p","NavButton","button","DateNav","props","onClick","navigation","disabled","StyledCard","StyledRow","LeftText","RightText","Separator","CenteredText","Header","FurtherGameDetails","GameDetails","Card","gameHeader","gameDetails","currentPeriod","clock","activeGameDetails","Spinner","Loader","CardsContainer","PageTitle","Page","Message","Games","useState","setGames","searching","setSearching","setDate","getDaysGames","getData","then","useEffect","content","map","length","type","color","height","width","daysFromCurrentDate","App","title","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78249247.chunk.js","sourcesContent":["import moment from 'moment';\r\n\r\nconst dateInputFormat = \"YYYYMMDD\"\r\n\r\nexport const dateOutPutFormat = (date) => moment(date).local().format(\"DD MM YYYY\");\r\nexport const formatTime = (time) => moment(time).local().format(\"HH:mm\")\r\n\r\nexport function getDate(daysFromDate, date = moment().format(dateInputFormat)) {\r\n    // if (daysFromDate === 0) return date\r\n    // else \r\n    return moment(date).add(daysFromDate, \"days\").format(dateInputFormat)\r\n}\r\n","import { formatTime } from \"../data\";\r\n\r\nexport async function request(method, url, params = \"\") {\r\n    try {\r\n        let response = await fetch(url + params, {\r\n            method: method\r\n        })\r\n        return response.json()\r\n    } catch (error) {\r\n        console.log(`Issue with fetch: ${error.message}`);\r\n    }\r\n}\r\n\r\nexport async function getData(date) {\r\n    const opt = await request(\"GET\", \"https://data.nba.net/10s/prod/v1/today.json\")\r\n    const season = opt.seasonScheduleYear\r\n    const teams = await request(\"GET\", `https://data.nba.net/10s/prod/v2/${season}/teams.json`)\r\n    const daysGames = await request(\"GET\", `https://data.nba.net/10s/prod/v1/${date}/scoreboard.json`)\r\n    let todaysGames = []\r\n    daysGames.games.forEach((game) => {\r\n        todaysGames.push(\r\n            {\r\n                hTeam: {\r\n                    fullName: teams.league.standard.filter((team) => team.teamId === game.hTeam.teamId)[0].fullName,\r\n                    score: game.hTeam.score,\r\n                    seriesWin: game.hTeam.seriesWin//change before playoffs\r\n                },\r\n                vTeam: {\r\n                    fullName: teams.league.standard.filter((team) => team.teamId === game.vTeam.teamId)[0].fullName,\r\n                    score: game.vTeam.score,\r\n                    seriesWin: game.vTeam.seriesWin//change before playoffs\r\n                },\r\n                date: game.homeStartDate,\r\n                time: formatTime(game.startTimeUTC),\r\n                key: game.gameId,\r\n                gameId: game.gameId,\r\n                startTimeTBD: game.isStartTimeTBD,\r\n                arena: `${game.arena.name}, ${game.arena.city} `,\r\n                isActiveGame: game.isGameActivated,\r\n                isEnded: ((game.endTimeUTC==undefined)? false: true)\r\n\r\n            })\r\n    })\r\n    return todaysGames\r\n}\r\n","import React from 'react';\r\nimport { dateOutPutFormat } from '../data';\r\nimport styled from 'styled-components';\r\n\r\nconst Nav = styled.div`\r\n  width: fit-content;\r\n  margin: auto;\r\n  display: flex; \r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Date = styled.p`\r\n  font-size: calc(11px + 1vmin);\r\n  vertical-align: middle;\r\n  margin: 10px;\r\n`;\r\n\r\nconst NavButton = styled.button`\r\n  margin: 10px;\r\n  font-size: calc(18px + 1vmin);\r\n  font-weight: bold;\r\n  background-color: #2d3038;\r\n  color: white;\r\n  border-radius: 20%;\r\n`;\r\n\r\nconst DateNav = (props) => {\r\n  return (\r\n    <Nav>\r\n      <NavButton onClick={() => props.navigation(-1)} disabled={props.disabled}>&#10594;</NavButton>\r\n      <Date>{dateOutPutFormat(props.date)}</Date>\r\n      <NavButton onClick={() => props.navigation(1)} disabled={props.disabled}>&#10596;</NavButton>\r\n    </Nav>\r\n  )\r\n}\r\nexport default DateNav;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCard = styled.div`\r\n  background-color: #2d3038;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  box-shadow: 1px 1px 1px 1px #0e1529;\r\n  margin: 5px 0;\r\n`;\r\n\r\nconst StyledRow = styled.div`\r\n  display: flex; \r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst LeftText = styled.div`\r\n  text-align: right;\r\n  width: 47%;\r\n`;\r\n\r\nconst RightText = styled.div`\r\n  text-align: left;\r\n  width: 47%;\r\n`;\r\n\r\nconst Separator = styled.div`\r\n  width: 4%;\r\n  text-align: center;\r\n  font-weight: 800;\r\n  font-size: calc(3px + 2vmin);\r\n`;\r\n\r\nconst CenteredText = styled.div`\r\n  text-align: center;\r\n  margin: 0;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  font-size: calc(16px + 1vmin);\r\n  text-shadow: 2px 2px #0e1529;\r\n  line-height: calc(30px + 1vmin);\r\n`;\r\n\r\nconst FurtherGameDetails = styled.div`\r\n  font-size: calc(10px + 1vmin);\r\n  line-height: calc(20px + 1vmin);\r\n`;\r\n\r\nconst GameDetails = styled.div`\r\n  font-size: calc(14px + 1vmin);\r\n  line-height: calc(25px + 1vmin);\r\n`;\r\n\r\nconst ActiveGameDetails = styled.div`\r\n  background-color: #444853;\r\n  text-align: center;\r\n  font-size: calc(14px + 1vmin);\r\n`;\r\nconst Card = (props) => {\r\n    let gameHeader =\r\n        <StyledRow>\r\n            <LeftText>\r\n                <Header>{props.hTeam.fullName}</Header>\r\n            </LeftText>\r\n            <Separator>vs</Separator>\r\n            <RightText>\r\n                <Header>{props.vTeam.fullName}</Header>\r\n            </RightText>\r\n        </StyledRow>\r\n\r\n    let gameDetails = (props.isEnded || props.isActiveGame) ?\r\n    <>\r\n        <StyledRow>\r\n            <LeftText>\r\n                <Header>{props.hTeam.score}</Header>\r\n            </LeftText>\r\n            <Separator>-</Separator>\r\n            <RightText>\r\n                <Header>{props.vTeam.score}</Header>\r\n            </RightText>\r\n        </StyledRow>\r\n\r\n        <StyledRow>\r\n            <LeftText>\r\n                <FurtherGameDetails>{props.hTeam.seriesWin}</FurtherGameDetails>\r\n            </LeftText>\r\n            <Separator>-</Separator>\r\n            <RightText>\r\n                <FurtherGameDetails>{props.vTeam.seriesWin}</FurtherGameDetails>\r\n            </RightText>\r\n        </StyledRow>\r\n        </>\r\n        :\r\n        <>\r\n        <CenteredText>\r\n            <GameDetails>{((!props.startTimeTBD) ? props.time : 'TBD')}</GameDetails>\r\n        </CenteredText>\r\n        <CenteredText>\r\n            <FurtherGameDetails>{props.arena}</FurtherGameDetails>\r\n        </CenteredText>\r\n        </>\r\n\r\n    let activeGameDetails;\r\n\r\n    if (props.isActiveGame){\r\n        <ActiveGameDetails>{`Q${props.currentPeriod} - ${props.clock}`}</ActiveGameDetails>\r\n    }\r\n\r\n    return (\r\n            <StyledCard>\r\n                {gameHeader}\r\n                {gameDetails}\r\n                {activeGameDetails}\r\n            </StyledCard>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Loader from 'react-loader-spinner';\r\nimport { getData } from '../API';\r\nimport { getDate } from '../data';\r\nimport Nav from \"./Navbar\"\r\nimport Card from \"./Card\"\r\n\r\nconst Spinner = styled(Loader)`\r\n    width: fit-content;\r\n    margin: 20px auto;\r\n`;\r\n\r\nconst CardsContainer = styled.div`\r\n    background-color: #3d424d;\r\n    font-size: calc(8px + 2vmin);\r\n    color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst PageTitle = styled.div`\r\n    margin: 10px auto;\r\n    text-align: center;\r\n    font-size: calc(13px + 2vmin);\r\n`;\r\n\r\nconst Page = styled.div`\r\n    color: white;\r\n    max-width: 700px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n`;\r\n\r\nconst Message = styled.p`\r\n    width: fit-content;\r\n    margin: 10px auto;\r\n    font-size: calc(5px + 2vmin);\r\n`;\r\n\r\nconst Games = () => {\r\n    const [games, setGames] = useState([])\r\n    const [searching, setSearching] = useState(true)\r\n    const [date, setDate] = useState(getDate(0))\r\n\r\n    const getDaysGames = () => {\r\n        setSearching(true)\r\n        getData(date).then(games => {\r\n            setGames(games)\r\n            setSearching(false)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDaysGames(date);\r\n    }, [date]);\r\n\r\n    const changeDate = (daysFromCurrentDate) => {\r\n        setDate(getDate(daysFromCurrentDate, date))\r\n    }\r\n\r\n    let content =\r\n        <CardsContainer>\r\n            {games.map(game =>\r\n                <Card\r\n                    {...game}\r\n                />\r\n            )}\r\n        </CardsContainer>\r\n\r\n    if (games.length == 0) {\r\n        content =\r\n            <Message> No Game Found :(</Message>\r\n    }\r\n\r\n    if (searching) {\r\n        content = <Spinner type=\"Circles\" color=\"white\" height={80} width={80} />\r\n    }\r\n\r\n    return (\r\n        <Page>\r\n            <PageTitle>NBA Games</PageTitle>\r\n            <Nav\r\n                navigation={changeDate}\r\n                date={date}\r\n                disabled={searching}\r\n            />\r\n            {content}\r\n        </Page>\r\n    )\r\n}\r\nexport default Games;","import React from 'react';\r\nimport './App.css';\r\nimport Games from \"./components/Games\"\r\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  return (\r\n  //   <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n  //   <Switch >\r\n  //     <Route exact path=\"/\" component={Games} />\r\n  //   </Switch>\r\n  // </BrowserRouter>\r\n\r\n    <Games\r\n      title=\"NBA Games\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App title=\"NBA App\" />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}