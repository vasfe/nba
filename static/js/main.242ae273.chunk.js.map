{"version":3,"sources":["data/index.ts","API/index.ts","pages/components/Cards/CardComponents.ts","pages/components/Cards/Card.tsx","pages/components/Nav/NavComponents.ts","pages/components/Nav/Nav.tsx","pages/GamesComponents.ts","pages/Games.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dateInputFormat","dateOutPutFormat","getDate","daysFromDate","date","moment","format","add","formatDate","local","formatTime","time","request","method","url","a","params","fetch","response","json","console","log","message","opt","season","seasonScheduleYear","teams","daysGames","todaysGames","games","forEach","game","push","hTeam","fullName","league","standard","filter","team","teamId","score","seriesWin","playoffs","vTeam","homeStartDate","startTimeUTC","key","gameId","startTimeTBD","isStartTimeTBD","arena","name","city","isActiveGame","isGameActivated","isEnded","undefined","endTimeUTC","basicGameData","hTeamScore","vTeamScore","currentPeriod","period","current","isEndOfPeriod","isHalftime","clock","StyledCard","styled","div","StyledRow","LeftText","RightText","Separator","CenteredText","Header","FurtherGameDetails","GameDetails","ActiveGameDetails","Card","props","state","SetActiveGame","setInterval","activeGameDetails","then","gameUpdate","setState","this","endedGameDetails","upcomingGameDetails","gameScore","gameStartTime","gameDetails","React","Component","Nav","Date","p","NavButton","button","DateNav","onClick","navigation","disabled","GamesContainer","PageTitle","Spinner","Loader","Page","Message","Games","searching","currentDate","changeView","bind","getGames","getDaysGames","direction","type","color","height","width","length","map","title","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.242ae273.chunk.js","sourcesContent":["import moment from 'moment';\nconst dateInputFormat = \"YYYYMMDD\"\nconst dateOutPutFormat = \"DD MM YYYY\"\nconst timeFormat = \"HH:mm\"\n\nexport function getDate(daysFromDate: number, date = moment().format(dateInputFormat)): string{\n    if (daysFromDate === 0) return date\n    else return moment(date).add(daysFromDate, \"days\").format(dateInputFormat)\n}\n\nexport function formatDate(date: string, format=dateOutPutFormat){\n    return moment(date).local().format(format);\n}\n\nexport function formatTime(time: string){\n    return moment(time).local().format(timeFormat)\n}","import { symbolName } from \"typescript\";\r\nimport { formatTime } from \"../data\";\r\nimport { ActiveGame, Game } from \"../interface\";\r\n\r\nexport async function request(method: string, url: string, params = \"\") {\r\n    try {\r\n        let response = await fetch(url + params, {\r\n            method: method,\r\n        })\r\n        return response.json()\r\n    } catch (error: any) {\r\n        console.log(`Issue with fetch: ${error.message}`);\r\n    }\r\n}\r\n\r\nexport async function getDaysGames(date: string): Promise<Game[]> {\r\n    const opt = await request(\"GET\", \"https://data.nba.net/10s/prod/v1/today.json\")\r\n    const season = opt.seasonScheduleYear\r\n    const teams = await request(\"GET\", `https://data.nba.net/10s/prod/v2/${season}/teams.json`)\r\n    const daysGames = await request(\"GET\", `https://data.nba.net/10s/prod/v1/${date}/scoreboard.json`)\r\n    let todaysGames: Game[] = []\r\n    daysGames.games.forEach((game: any) => {\r\n        todaysGames.push(\r\n            {\r\n                hTeam: {\r\n                    fullName: teams.league.standard.filter((team: any) => team.teamId === game.hTeam.teamId)[0].fullName,\r\n                    score: game.hTeam.score,\r\n                    seriesWin: game.playoffs.hTeam.seriesWin//change after playoffs\r\n                },\r\n                vTeam: {\r\n                    fullName: teams.league.standard.filter((team: any) => team.teamId === game.vTeam.teamId)[0].fullName,\r\n                    score: game.vTeam.score,\r\n                    seriesWin: game.playoffs.vTeam.seriesWin//change after playoffs\r\n\r\n                },\r\n                date: game.homeStartDate,\r\n                time: formatTime(game.startTimeUTC),\r\n                key: game.gameId,\r\n                gameId: game.gameId,\r\n                startTimeTBD: game.isStartTimeTBD,\r\n                arena: `${game.arena.name}, ${game.arena.city} `,\r\n                isActiveGame: game.isGameActivated,\r\n                isEnded: ((game.endTimeUTC==undefined)? false: true)\r\n\r\n            })\r\n    })\r\n    return todaysGames\r\n}\r\n\r\nexport async function activeGameDetails(date: string, gameId: string): Promise<ActiveGame> {\r\n    const game = (await request(\"GET\", `https://data.nba.net/10s/prod/v1/${date}/${gameId}_boxscore.json`)).basicGameData;\r\n    return (\r\n        {\r\n            hTeamScore: game.hTeam.score,\r\n            vTeamScore:game.vTeam.score,\r\n            currentPeriod: game.period.current,\r\n            isEndOfPeriod: game.period.isHalftime,\r\n            isHalftime: game.period.isEndOfPeriod,\r\n            clock: game.clock,\r\n        }\r\n    )\r\n}","import styled from 'styled-components';\n\nexport const StyledCardsContainer = styled.div`\n  background-color: #3d424d;\n  font-size: calc(8px + 2vmin);\n  display: flex;\n  flex-direction: column;\n`\n\nexport const StyledCard = styled.div`\n  background-color: #2d3038;\n  padding: 10px 0;\n  width: 100%;\n  border-radius: 10px;\n  box-shadow: 1px 1px 1px 1px #0e1529;\n  margin: 5px 0;\n`;\n\nexport const StyledRow = styled.div`\n  display: flex; \n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const LeftText = styled.div`\n  text-align: right;\n  width: 47%;\n`;\n\nexport const RightText = styled.div`\n  text-align: left;\n  width: 47%;\n`;\n\nexport const Separator = styled.div`\n  width: 4%;\n  text-align: center;\n  font-weight: 800;\n  font-size: calc(3px + 2vmin);\n`;\n\nexport const CenteredText = styled.div`\n  text-align: center;\n  margin: 0;\n`;\n\nexport const Header  = styled.div`\n  font-size: calc(8px + 2vmin);\n  text-shadow: 2px 2px #0e1529;\n  line-height: calc(20px + 2vmin);\n`;\n\nexport const FurtherGameDetails = styled.div`\n  font-size: calc(5px + 2vmin);\n  line-height: calc(15px + 2vmin);\n`;\n\nexport const GameDetails = styled.div`\n  font-size: calc(7px + 2vmin);\n  line-height: calc(18px + 2vmin);\n`;\n\nexport const ActiveGameDetails = styled.div`\n  background-color: #444853;\n  text-align: center;\n  font-size: 15px;;\n`;","import React from 'react';\nimport { activeGameDetails } from '../../../API';\nimport { Game, ActiveGame } from '../../../interface';\nimport { StyledCard, StyledRow, LeftText, RightText, Separator, ActiveGameDetails, CenteredText, Header, GameDetails, FurtherGameDetails } from './CardComponents';\n\nclass Card extends React.Component<Game, ActiveGame>{\n  constructor(props: Game) {\n    super(props);\n    if (props.isActiveGame) {\n      this.state = {\n        currentPeriod: \"\",\n        vTeamScore: props.vTeam.score,\n        hTeamScore: props.hTeam.score,\n        clock: \"\",\n        isHalftime: false,\n        isEndOfPeriod: false\n      };\n      this.SetActiveGame()\n    }\n  }\n  SetActiveGame() {\n    console.log(\"subscription set\")\n    setInterval(() => activeGameDetails(this.props.date, this.props.gameId).then(gameUpdate => {\n      console.log(\"updating score for \" + this.props.hTeam.fullName)\n      this.setState({ ...gameUpdate })\n    }), 5000)\n  }\n  gameScore() {\n    return (\n      <StyledRow>\n        <LeftText>\n          <Header>{this.props.hTeam.score}</Header>\n        </LeftText>\n        <Separator>-</Separator>\n        <RightText>\n          <Header>{this.props.vTeam.score}</Header>\n        </RightText>\n      </StyledRow>\n    );\n  }\n  activeGameDetails() {\n    return (\n      <ActiveGameDetails>{`Q${this.state.currentPeriod} - ${this.state.clock}`}</ActiveGameDetails>\n    );\n  }\n  endedGameDetails() {\n    return (\n      <StyledRow>\n        <LeftText>\n          <FurtherGameDetails>{this.props.hTeam.seriesWin}</FurtherGameDetails>\n        </LeftText>\n        <Separator>-</Separator>\n        <RightText>\n          <FurtherGameDetails>{this.props.vTeam.seriesWin}</FurtherGameDetails>\n        </RightText>\n      </StyledRow>\n    )\n  }\n  upcomingGameDetails() {\n    return (\n      <CenteredText>\n        <FurtherGameDetails>{this.props.arena}</FurtherGameDetails>\n      </CenteredText>\n    )\n  }\n  gameStartTime() {\n    return (\n      <CenteredText>\n        <GameDetails>{ ((!this.props.startTimeTBD) ? this.props.time : 'TBD')}</GameDetails>\n      </CenteredText>\n    );\n  }\n  gameDetails() {\n    return ((this.props.isEnded) ? this.endedGameDetails() : this.upcomingGameDetails())\n  }\n  render() {\n    return (\n      <StyledCard>\n        <StyledRow>\n          <LeftText>\n            <Header>{this.props.hTeam.fullName}</Header>\n          </LeftText>\n          <Separator>vs</Separator>\n          <RightText>\n            <Header>{this.props.vTeam.fullName}</Header>\n          </RightText>\n        </StyledRow>\n        {((this.props.isActiveGame || this.props.isEnded) ? this.gameScore() : this.gameStartTime())}\n        {((this.props.isActiveGame) ? this.activeGameDetails() : this.gameDetails())}\n      </StyledCard>\n    )\n  }\n}\nexport default Card;\n\n\n\n\n// gameDetails() {\n//   // if (isCollapsed) {\n//   return (\n//     <>\n//       {/* <StartTime>{startTime}</StartTime> */}\n\n//       {((this.props.isEnded) ? this.endedGameDetails() : this.gameDetails())}\n\n//       {this.endedGameDetails()}\n//       {/* <GameDetails>\n//         <p>{props.arena}</p>\n\n//       </GameDetails> */}\n//       {/* <CollapseButton\n//         onClick={() => toggleCollapsed(false)}>\n//         &#10224;\n//       </CollapseButton> */}\n//     </>\n\n//   )\n// }\n// // else {\n// //   return (\n// //       <CollapseButton\n// //         onClick={() => toggleCollapsed(true)}>\n// //         &#10225;\n// //       </CollapseButton>\n// //   );\n// // }\n// // }","import styled from 'styled-components';\n\nexport const Nav = styled.div`\n  width: fit-content;\n  margin: auto;\n  display: flex; \n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Date = styled.p`\n  font-size: calc(4px + 2vmin);\n  vertical-align: middle;\n  margin: 10px;\n`;\n\nexport const NavButton = styled.button`\n  margin: 10px;\n  font-size: calc(10px + 2vmin);\n  font-weight: bold;\n  background-color: #2d3038;\n  color: white;\n  border-radius: 20%;\n`;","import React from 'react';\nimport { formatDate } from '../../../data';\nimport { Navigation } from '../../../interface';\nimport { Nav, NavButton, Date } from './NavComponents';\n\nconst DateNav = (props: Navigation) => {\n  return (\n    <Nav>\n      <NavButton onClick={() => props.navigation(-1)} disabled={props.disabled}>&#10594;</NavButton>\n      <Date>{formatDate(props.date)}</Date>\n      <NavButton onClick={() => props.navigation(1)} disabled={props.disabled}>&#10596;</NavButton>\n    </Nav>\n  )\n}\nexport default DateNav;","import styled from 'styled-components';\nimport Loader from 'react-loader-spinner';\n\nexport const GamesContainer = styled.div`\n    background-color: #3d424d;\n    font-size: calc(8px + 2vmin);\n    color: white;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const PageTitle = styled.div`\n    margin: 10px auto;\n    text-align: center;\n    font-size: calc(13px + 2vmin);\n`;\n\nexport const Spinner = styled(Loader)`\n    width: fit-content;\n    margin: 20px auto;\n`;\n\nexport const Page = styled.div`\n    color: white;\n    max-width: 600px;\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nexport const Message = styled.p`\n    width: fit-content;\n    margin: 10px auto;\n`;","import React from 'react';\nimport { getDaysGames } from '../API'\nimport { getDate } from '../data';\nimport Card from './components/Cards/Card'\nimport Nav from './components/Nav/Nav'\nimport { GamesProps, GamesPageStates } from '../interface';\nimport { GamesContainer, Page, PageTitle, Spinner, Message } from './GamesComponents';\n\nclass Games extends React.Component<GamesProps, GamesPageStates>{\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      searching: true,\n      games: [],\n      currentDate: getDate(0)\n    };\n    this.changeView = this.changeView.bind(this);\n    this.getGames()\n  }\n  getGames() {\n    this.setState({\n      searching: true\n    })\n    getDaysGames(this.state.currentDate).then(daysGames => {\n      this.setState({\n        games: daysGames,\n        searching: false\n      })\n    })\n  }\n  changeView(direction: number) {\n    this.setState({\n      currentDate: getDate(direction, this.state.currentDate)\n    },\n      this.getGames\n    )\n  }\n  games() {\n    if (this.state.searching) {\n      return (\n        <Spinner type=\"Circles\" color=\"white\" height={80} width={80} />\n      )\n    }\n    else {\n      if (this.state.games.length != 0) {\n        return (\n          <GamesContainer>\n            {this.state.games.map(game =>\n              <Card\n              {...game}\n              />\n            )}\n          </GamesContainer>\n        )\n      }\n      else {\n        return (\n          <Message> No Game Found :(</Message>\n        )\n      }\n    }\n  }\n  render() {\n    return (\n      <Page>\n        <PageTitle>\n          {this.props.title}\n        </PageTitle>\n        <Nav\n          navigation={this.changeView}\n          date={this.state.currentDate}\n          disabled={this.state.searching}\n        />\n        {this.games()}\n      </Page>\n    );\n  }\n}\n\nexport default Games;","import React from 'react';\nimport './App.css';\nimport { IAppProps } from './interface';\nimport Games from './pages/Games';\n\nconst App = (props: IAppProps)=> {\n    return (\n      <Games\n        title=\"NBA Games\"\n        >\n      </Games>\n    );\n}\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App \n        title=\"NBA App\"\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}